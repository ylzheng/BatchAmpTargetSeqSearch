<!-- This is a Apache Ant build script for Apollo.

     To build apollo's class files, execute "ant compile".
     To produce an apollo.jar file in apollo/jars, execute "ant jar".
     To clear out the classfiles directory, execute "ant clean."

    For more information on Apache Ant, see:

        http://ant.apache.org/
-->


<project name="apollo" default="compile" basedir=".">

  <property name="projectName" value="BatchAmpTargetSeqSearch" />
  <property name="src" value="src/main/java" />
  <property name="build" value="target/classes" />
  <property name="lib" value="jars" />
  <property name="dist.dir" location="dist" />
  <property name="dist.lib.dir" location="dist/lib" />
  <property name="data" value="data" />
  <property name="conf" value="conf" />
  <property name="jarfile" value="jars/apollo.jar"/>
  <property name="main-class" value="apollo.analysis.BatchPrimerPairSubmit" />


  <!-- The timestamp target writes out a new timestamp to
       apollo/data/timestamp.-->
  <target name="timestamp">
    <tstamp>
        <format property="TIMESTAMP" pattern="MMM d yyyy"/>
    </tstamp>
    <echo message="Updating ${data}/timestamp to reflect newest Apollo file:"/>
    <echo message="${TIMESTAMP}"/>
    <echo message="${TIMESTAMP}${line.separator}" file="${data}/timestamp"/>
  </target>


  <!-- The init target makes sure that the prerequisite directories exist. -->
  <target name="init" depends="timestamp">
    <mkdir dir="${build}" />
  </target>


  <!-- The classpath includes all the jar files in apollo/jars, excluding
       apollo/jars/apollo.jar if it exists. -->
  <path id="project.classpath">
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
      <exclude name="apollo.jar"/>
    </fileset>
  </path>


  <!-- The compile target runs javac on all the java files, and saves them into        the classfiles directory. -->
  <target name="compile" depends="init">
    <javac srcdir="${src}" destdir="${build}">
      <classpath refid="project.classpath"/>
    </javac>
  </target>


  <!-- Group all dependencies into a big dependency-all.jar -->
  <target name="copy-dependencies">

    <mkdir dir="${dist.lib.dir}" />

    <jar jarfile="${dist.lib.dir}/dependencies-all.jar">
      <zipgroupfileset dir="${lib}">
        <include name="**/*.jar" />
      </zipgroupfileset>
    </jar>

  </target>



  <!-- The jar target compiles everything, and produces an apollo.jar in
       apollo/jars/apollo.jar.  -->
  <target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.lib.dir}" />

    <jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build}">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
      </manifest>
      <zipfileset src="${dist.lib.dir}/dependencies-all.jar"
                  excludes="META-INF/*.SF" />
    </jar>

  </target>


  <!-- The clean target just erases the classes -->
  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="${dist.dir}" />
  </target>


  <!-- Default, run this -->
  <target name="main" depends="clean, compile, jar" />


</project>
